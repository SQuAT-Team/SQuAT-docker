.\" -*- nroff -*-
.TH lqngen 1 "01 December 2015"  "5.8"
.\" $Id: lqngen.1 12338 2015-12-01 17:12:23Z greg $
.\"
.\" --------------------------------
.SH "NAME"
lqngen \- generate layered queueing network models.
.SH "SYNOPSIS"
.br
.B lqngen
[\fIOPTION \&.\|.\|.\fP]
[
FILE
]
.SH "DESCRIPTION"
\fBlqngen\fP is used to create one or more LQN input files.  If no \fIFILE\fP is
specified, the model will be output to \fIstdout\fP.  If no options
are specified, a simple annotated model consisting of one reference task, one
serving task and their respective processors is produced.  
If \fIFILE\fP exists, it will be over written with a new model file.  To convert a model
to use either SPEX or LQX, use \fBlqn2lqx\fP(1).
.PP
The size of a model is controlled by setting the number of server-task layers with \fB\-L\fP\fIn\fP, 
tasks with \fB\-T\fP\fIn\fP, 
processors with \fB\-T\fP\fIn\fP
and customers with \fB\-C\fP\fIn\fP where \fIn\fP is greater than or equal to 1.
By default, tasks are added starting from the reference tasks and working down ensuring that each layer has
the same number of tasks.  The structure of the model can be changed using one of
\fB\-\-fat\fP\fI\fP, \fB\-\-pyramid\fP\fI\fP, \fB\-\-hour-glass\fP\fI\fP or 
\fB\-\-random\fP\fI\fP.
.PP
All parameters are initialized to 1 by default.  To change the default value or to randomize the values, use one or all of
\fB\-\-customers\fP=\fIn\fP, \fB\-\-processor-multiplicity\fP=\fIn\fP, \fB\-\-service-time\fP=\fIn.n\fP, 
\fB\-\-task-multiplicity\fP=\fIn\fP, \fB\-\-request-rate\fP=\fIn.n\fP and \fB\-\-think-time\fP=\fIn.n\fP.
Two different random number generators (including \fIconstant\fP) are used, one for integer values to set multiplicities, and one for continuous values to set 
service times and request rates.  In either case, \fIn\fP is used to set the mean value or shape parameter for the generator.
The various random number generators are described below.  The random number generator option must appear before the parameter option.
Finally, different random number generators can be used for each of the parameter types.
.PP
To create a simple model with with LQX or SPEX code, use
\fB\-\-lqx-output\fP or \fB\-\-spex-output\fP respectively.
In this case, all scalar parameters in the input file are replaced with variables.
.PP
Two choices exist to create multiple models:\fB\-\-experiments\fP=\fIn\fP and \fB\-\-models\fP=\fIn\fP.
For the first case, SPEX arrays or LQX \f(CWfor\fP loops are created to run one model file with multiple values.
For the second case, different model files are created in a subdirectory called \fIfilename.d\fP where \fIfileanme\fP
is specified on the command line.  Randomness in the input specification is required for this option.

.SH "OPTIONS"
.TP
\fB\-A\fR, \fB\-\-automatic=\fIARG\fR
Create a model with \fIARG\fP layers, clients, processor and \fIARG\u\s-22\s+2\d\fP tasks.
.TP
\fB\-C\fR, \fB\-\-clients=\fIARG\fR
Create \fIARG\fP client \fI(reference)\fP fR tasks.  Use \fB\-\-customers\fP to
specify the average number of customers (copies) at each client task.
.TP
\fB\-L\fR, \fB\-\-layers=\fIARG\fR
Create \fIARG\fP layers of server tasks.  The total number of layers
in the model will be \fIARG+2\fP because one layer is used for
client tasks, and one layer will be used for one or more processors.
.TP
\fB\-P\fR, \fB\-\-processors=\fIARG\fR
Create  \fIARG\fP processors in each model file.
.TP
\fB\-T\fR, \fB\-\-tasks=\fIARG\fR
Create  \fIARG\fP tasks in each  model file.  The number of tasks must
be greater than or equal to the number of layers.
.TP
\fB\-Y\fR, \fB\-\-outgoing-requests=\fIARG\fR
Generate an average of \fIARG\fP outgoing requests from each entry.
Connections are made at random from a higher level task to a lower level task.
(not implemented, nor is full connectivity)
.TP
\fB\-M\fR, \fB\-\-models=\fIARG\fR
Generate \fIARG\fP model files, provided some randomness is present
in layer creation (see \fB\-\-fat\fP, \fB\-\-funnel\fP,
With this option, the file name arguments are treated as directory names, and the 
generated model files are named \f(CWcase-1.lqn\fP, \f(CWcase-2.lqn\fP, etc.
.TP
\fB\-N\fR, \fB\-\-experiments=\fIARG\fR
Generate \fIARG\fP experiments within one model file. The experiments
will be run using either SPEX (for LQN input), or LQX (for XML input).
This option will turn on either \fB\-\-spex-output\fP, or \fB\-\-lqx-output\fP
depending on the output format.
.TP
\fB\-O\fR, \fB\-\-format=\fIARG\fR
Set the output file format, \fIARG\fP, to: \fIxml\fP, \fIlqn\fP.
.TP
\fB\-c\fR, \fB\-\-customers=\fIARG\fR
Set the \fImean\fP number of customers at each of the client reference tasks to \fIARG\fP.
.TP
\fB\-e\fR, \fB\-\-entries=\fIARG\fR
Create an average of \fIARG\fP entries on each serving task.   The
number of entries created is set using the current discreet random
number generator.  
.TP
\fB\-i\fR, \fB\-\-infinite-server=\fIARG\fR
Set the probability that a server is infinite to \fIARG\fP.
.TP
\fB\-p\fR, \fB\-\-processor-multiplicity=\fIARG\fR
Set the \fImean\fP processor multiplicity for each processor to
\fIARG\fP.  The
number of copies of each processor is set using the current discreet (or uniform) random number generator.
.TP
\fB\-s\fR, \fB\-\-service-time=\fIARG\fR
Set the \fImean\fP phase service time to \fIARG\fP.  The mean phase
service time is set using the current continuous random number generator.
.TP
\fB\-t\fR, \fB\-\-task-multiplicity=\fIARG\fR
Set the \fImean\fP task multiplicity for each task to
\fIARG\fP.  The
number of copies of each task is set using the current discreet (or uniform) random number generator.
.TP
\fB\-y\fR, \fB\-\-request-rate=\fIARG\fR
Set the mean rendezous (synchronous call) rate to \fIARG\fP.  
The mean rendezvous rate is set using the current continuous random number generator.
.TP
\fB\-z\fR, \fB\-\-think-time=\fIARG\fR
Set the mean think time at reference tasks to \fIARG\fP.  
The mean think time is set using the current continuous random number generator.
.TP
\fB\-2\fR, \fB\-\-second-phase=\fIARG\fR
Set the probability that an entry at a server task has a second phase
to \fIARG\fP.  \fIARG\fP must be between 0 and 1.
.TP
\fB\-h\fR, \fB\-\-help\fR
Print out a brief help summary and exit.
.TP
\fB\-v\fR, \fB\-\-verbose\fR
Verbose output (whatever that is...)
.TP
\fB\-\-comment=\fIARG\fR
Set the model comment to \fIARG\fP.  By default, the comment is set to
the command line options of the invocation of \fBlqngen\fP.
.TP
\fB\-\-convergence-value=\fIARG\fR
Set the model convergence limit to \fIARG\fP.  By default, the
convergence limit is set to 0.00001.
.TP
\fB\-\-under-relaxation=\fIARG\fR
Set the model under-relaxation to \fIARG\fP.  By default, the
under-relaxation is set to 0.9.
.TP
\fB\-\-iteration-limit=\fIARG\fR
Set the model iteration limit to \fIARG\fP.  By default, the iteration
limit is set to 50.  For models with many layers, this  value should
be higher.
.TP
\fB\-\-seed=\fIARG\fR
Set the seed value for the random number generator to \fIARG\fP.
.TP
\fB\-\-constant\fR
Use \fIconstant\fP values for all subsequent parameters.
.TP
\fB\-\-normal=\fIARG\fR
Set the continuous random variable generator to use a Normal
distribution with a standard deviation of \fIARG\fP for any subsequent
flag that uses a continuous distribution.
.TP
\fB\-\-gamma=\fIARG\fR
Set the continuous random variable generator to use a Gamma
distribution with a shape parameter of \fIARG\fP  for any subsequent
flag that uses a continuous distribution.  Integer values of
\fIARG\fP will generate random numbers with an Erlang distribution.  A
shape value of 1 will generate random numbers with an Exponential
distribution.  Note that the parameter argument for subsequent
\fB\-\-service-time\fP, \fB\-\-rendezvous-rate\fP, and
\fB\-\-think-time\fP options set the distribution's \fIscale\fP value,
and not it's mean.
.TP
\fB\-\-poisson\fR
Use a Poisson distribution for all subsequent options that use a
discreet random variable generator.
.TP
\fB\-\-uniform=\fIARG\fR
Use a uniform distribution for all subsequent options that use a
discreet or continuous random variable generator.  The spread of the
distribution is set to \fIARG\fP.
.TP
\fB\-\-funnel\fR
Create a model with a ``funnel'' shape, that is there are more serving
tasks at the top of the model than at the bottom.  The default is to
create a model with tasks randomly distributed among the layers.
.TP
\fB\-\-pyramid\fR
Create a model with a ``pyramid'' shape, that is there are more serving
tasks at the bottom of the model than at the top.  The default is to
create a model with tasks randomly distributed among the layers.
.TP
\fB\-\-fat\fR
Create a model with a ``fat'' shape, that is there are more serving
tasks in the middle of the model than at either the top or the bottom.
The default is to create a model with tasks randomly distributed among
the layers.
.TP
\fB\-\-hour-glass\fR
Generate a model with more tasks at both the top and bottom than in the middle.
.TP
\fB\-\-deterministic\fR
Assign processors deterministically from top to bottom.
.TP
\fB\-\-random\fR
Choose a random number of tasks at each layer.
.TP
\fB\-\-transform\fR
Transform the input model, rather than creating it (i.e., run the program as \fBlqn2lqx\fP(1).
.TP
\fB\-\-[no-]annotate\fR
Annotate (do not annotate) LQN-type input files.  This option has no effect for
XML output.  The default is to annotate LQN model files.
.TP
\fB\-\-long-names\fR
Use ``long'' names such as \f(CWProcessor0\fP, \f(CWClient0\fP, \f(CWTask0\fP, and \f(CWEntry0\fP, rather than short names such as \f(CWp0\fP, \f(CWc0\fP, \f(CWt0\fP, and \f(CWe0\fP
.TP
\fB\-\-xml-output\fR
Output the input model in eXtensible Markup Language (XML).
.TP
\fB\-\-lqx-output\fR
Generate LQX control code for XML output files.  Variables will be
created for all parameters set by the options above and will be
initialized using the current random number generator.  If
\fB\-\-experiments\fP=\fIARG\fP is also used, loop code will be
produced to generate \fIARG\fP runs.  This option will enable XML output.
.TP
\fB\-\-spex-output\fR
Generate SPEX control code for LQN output files.  Variables will be
created for all parameters set by the options above and will be
initialized using the current random number generator.  If
\fB\-\-experiments\fP=\fIARG\fP is also used, loop code will be
produce to generate \fIARG\fP runs.  This option will enable LQN
output.
.TP
\fB\-\-[no-]input-parameters\fR
If this flag is set, output the values of any parameter which is varied, otherwise input parameter
values are not shown. The default is to show the value of input variables that can be changed as
the SPEX/LQX program runs.
.TP
\fB\-\-[no-]utilization\fR
Insert LQX or SPEX code to either observe or not observe processor utilization for all ``interesting'' processors.
Interesting processors are those which might have contention present.
The default is to observe processor utilization.
.TP
\fB\-\-[no-]throughput\fR
Insert LQX code or SPEX observation variables to output task throughput for all ``intersting'' tasks.
Interesting tasks are those which might have contention present.
The default is to insert observation variables.
.TP
\fB\-\-[no-]residence-time\fR
Insert LQX code or SPEX observation variables to output entry service (residence) time.
The default is to insert observation variables.
.TP
\fB\-\-[no-]mva-waits\fR
Insert LQX code or SPEX observation variables to output the number of calls to wait().
The default is to not insert observation variables.
.TP
\fB\-\-[no-]iterations\fR
Insert LQX code or SPEX observation variables to output the number of solver iterations.
The default is to not insert observation variables.
.TP
\fB\-\-[no-]elapsed-time\fR
Insert LQX code or SPEX observation variables to output the solver's ELAPSED time.
The default is to not insert observation variables.
.TP
\fB\-\-[no-]user-cpu-time\fR
Insert LQX code or SPEX observation variables to output the solver's USER CPU time.
The default is to not insert observation variables.
.TP
\fB\-\-[no-]system-cpu-time\fR
Insert LQX code or SPEX observation variables to output the solver's SYSTEM CPU time.
The default is to not insert observation variables.
.TP
\fB\-\-manual-page\fR
Generate the manual page and send the output to \fIstdout\fP.

.SH "SEE ALSO"
\fBlqngen\fP(1), \fBlqns\fP(1), \fBlqsim\fP(1), \fBlqn2ps\fP(1)

.SH "EXAMPLES"
To generate an annontated input file consisting of a single client calling a single server, both with their own processor: 
.sp
.ti 0.75i
\f(CWlqngen output.lqn\fP
.sp
To create a model with two tiers with two classes of customers and where each tier is running on its own processor: 
.sp
.ti 0.75i
\f(CWlqngen -L2 -C2 -T4 -P2 output.lqn\fP
.sp
To add exactly two entries to each server task: 
.sp
.ti 0.75i
\f(CWlqngen -L2 -T4 -P2 -C2 -d -e2 output.lqn\fP
.sp
Note that entries always accept at least one request, but an entry may not necessarily generate requests to lower layers.
.sp
To generate two experiments with random service times uniformly distributed between [0.5,1.5]: 
.sp
.ti 0.75i
\f(CWlqngen --experiments=2 --uniform=1 --service-time=1\fP
.sp
Note that the distribution \fImust be\fP specified prior to the parameter.
